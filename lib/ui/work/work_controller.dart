import 'dart:ui';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:timeforlife/commons/constant/color_constant.dart';
import 'package:timeforlife/ui/addwork/add_work_view.dart';
import 'package:timeforlife/ui/detailwork/detail_work_controller.dart';
import 'package:timeforlife/ui/detailwork/detail_work_view.dart';
import 'package:intl/intl.dart';

class WorkController extends GetxController {
  final databaseRef=FirebaseDatabase.instance.reference();

  User ? user;
  var timeDate = ''.obs;

  RxList<Work> list = RxList<Work>();
  RxList<Work> listkey = RxList<Work>();
  var query=''.obs;

  @override
  void onInit() {
    user = Get.arguments;
    print('check ${user!.uid}');
    getDatenow();
    getWork();
  }

  void selectTimeDate(String date){
    formatDate(date);
  }

  void formatDate(String date){
    var inputFormat = DateFormat('yyyy-MM-dd HH:mm');
    var inputDate = inputFormat.parse(date);
    var outputFormat = DateFormat('dd/MM/yyyy');
    timeDate.value=outputFormat.format(inputDate);
    print(timeDate.value);
  }

  void getDatenow(){
    var inputFormat = DateFormat('yyyy-MM-dd HH:mm');
    var inputDate = inputFormat.parse(DateTime.now().toString());
    var outputFormat = DateFormat('dd/MM/yyyy');
    timeDate.value=outputFormat.format(inputDate);

  }

  Color? colorcompare(String value1,String value2){
    Color ? color;
    if(value1=='Quan trọng' && value2=='Không khẩn cấp'){
      color=ColorConstant.status3;
    }
    if(value1=='Quan trọng' && value2=='Khẩn cấp'){
      color=ColorConstant.status2;
    }
    if(value1=='Không quan trọng' && value2=='Khẩn cấp'){
      color=ColorConstant.status1;
    }
    if(value1=='Không quan trọng' && value2=='Không khẩn cấp'){
      color=ColorConstant.status4;
    }
    return color;
  }
  void addWork() {
    Get.to(() => AddWorkView(), arguments: user);
  }
  void toDetail(int index){

  Get.to(()=>DetailWorkView(),arguments: {"list":list[index],"user":user});
  }

  void updateStatus(int index) async{
      var keys= list[index].key;
    var key=user!.uid.toString();
    await databaseRef.child('Work').child(key).child(keys!).update({
      'Status':true,

    }).then((value) => Get.snackbar('Thông báo', 'Cập nhật trạng thái công việc thành công'));
    getWork();
  }

  void getWork() async{
    //addValueEventListener
   await FirebaseDatabase.instance.reference().child("Work").child(user!.uid).orderByChild("DateTime").equalTo(timeDate.value).once()
        .then((DataSnapshot dataSnapshot) {
            if(dataSnapshot.exists){
              var keys=dataSnapshot.value.keys;
              var values=dataSnapshot.value;
              print(dataSnapshot.value);
              list.clear();
              for(var key in keys){
                Work work=new Work(
                  key: key,
                  status: values [key]['Status'],
                  contentWork: values [key]['ContentWork'],
                  dateTime: values [key]['DateTime'],
                  endTime: values [key]['EndTime'],
                  priorityLevel1: values [key]['PriorityLevel1'],
                  priorityLevel2: values [key]['PriorityLevel2'],
                  startTime: values [key]['StartTime'],
                  timeDuration: values [key]['TimeDuration'],
                  alarm: values [key]['alarm'],
                  id: values [key]['id'],
                  kpi: values [key]['kpi'],
                  notification: values [key]['notification'],
                );
                list.add(work);
                // print('check key ${work.key}');
              }
            }else{
              list.value=[];
            }
    });
  }

}


class Autogenerated {
  Work ?work;

  Autogenerated({this.work});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    work = json['Work'] != null ? new Work.fromJson(json['Work']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.work != null) {
      data['Work'] = this.work!.toJson();
    }
    return data;
  }
}

class Work {
  String ?key;
  bool ? status;
  String ? contentWork;
  String ? dateTime;
  String ? endTime;
  String ? priorityLevel1;
  String ? priorityLevel2;
  String ?startTime;
  String ?timeDuration;
  bool? alarm;
  String ?id;
  bool? kpi;
  bool ?notification;
  double ? rating;

  Work(
      {
        this.status,
        this.key,
        this.contentWork,
        this.dateTime,
        this.endTime,
        this.priorityLevel1,
        this.priorityLevel2,
        this.startTime,
        this.timeDuration,
        this.alarm,
        this.id,
        this.kpi,
        this.notification,
        this.rating
      });

  Work.fromJson(Map<String, dynamic> json) {
    contentWork = json['ContentWork'];
    dateTime = json['DateTime'];
    endTime = json['EndTime'];
    priorityLevel1 = json['PriorityLevel1'];
    priorityLevel2 = json['PriorityLevel2'];
    startTime = json['StartTime'];
    timeDuration = json['TimeDuration'];
    alarm = json['alarm'];
    id = json['id'];
    kpi = json['kpi'];
    notification = json['notification'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['ContentWork'] = this.contentWork;
    data['DateTime'] = this.dateTime;
    data['EndTime'] = this.endTime;
    data['PriorityLevel1'] = this.priorityLevel1;
    data['PriorityLevel2'] = this.priorityLevel2;
    data['StartTime'] = this.startTime;
    data['TimeDuration'] = this.timeDuration;
    data['alarm'] = this.alarm;
    data['id'] = this.id;
    data['kpi'] = this.kpi;
    data['notification'] = this.notification;
    return data;
  }
}

